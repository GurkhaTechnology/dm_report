{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Desktop\\\\analytics-dashboard\\\\src\\\\pages\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Papa from 'papaparse';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS } from 'chart.js';\nimport Select from 'react-select';\nimport { unparse } from 'json2csv';\nimport { saveAs } from 'file-saver';\nimport 'chart.js/auto';\n\n// Default data fetching URL\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DATA_URL = 'https://your-google-sheet-link.csv';\nconst Dashboard = () => {\n  _s();\n  // State to hold the raw data, filtered data, company options, and selected filters\n  const [data, setData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [companies, setCompanies] = useState([]);\n  const [selectedCompany, setSelectedCompany] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n\n  // Fetch data on initial load\n  useEffect(() => {\n    fetch(DATA_URL).then(response => response.text()).then(text => {\n      Papa.parse(text, {\n        complete: result => {\n          const fetchedData = result.data;\n          setData(fetchedData);\n          setFilteredData(fetchedData);\n          const uniqueCompanies = [...new Set(fetchedData.map(item => item['Company Name']))];\n          setCompanies(uniqueCompanies.map(company => ({\n            label: company,\n            value: company\n          })));\n        }\n      });\n    });\n  }, []);\n\n  // Handle company filter change\n  const handleCompanyChange = selectedOption => {\n    setSelectedCompany(selectedOption);\n  };\n\n  // Handle date filter change\n  const handleDateChange = e => {\n    setSelectedDate(e.target.value);\n  };\n\n  // Apply filters to the data\n  useEffect(() => {\n    let filtered = data;\n    if (selectedCompany) {\n      filtered = filtered.filter(item => item['Company Name'] === selectedCompany.value);\n    }\n    if (selectedDate) {\n      filtered = filtered.filter(item => item['Date'] === selectedDate);\n    }\n    setFilteredData(filtered);\n  }, [selectedCompany, selectedDate, data]);\n\n  // Prepare chart data\n  const chartData = {\n    labels: filteredData.map(item => item['Date']),\n    datasets: [{\n      label: 'Reach',\n      data: filteredData.map(item => item['Reach']),\n      borderColor: 'rgba(75, 192, 192, 1)',\n      fill: false\n    }, {\n      label: 'Impressions',\n      data: filteredData.map(item => item['Impressions']),\n      borderColor: 'rgba(153, 102, 255, 1)',\n      fill: false\n    }]\n  };\n\n  // Export filtered data to CSV\n  const exportToCSV = () => {\n    const csv = unparse(filteredData);\n    const blob = new Blob([csv], {\n      type: 'text/csv;charset=utf-8;'\n    });\n    saveAs(blob, 'filtered_data.csv');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Social Media Performance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      options: companies,\n      onChange: handleCompanyChange,\n      value: selectedCompany,\n      placeholder: \"Select Company\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"date\",\n      value: selectedDate,\n      onChange: handleDateChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: exportToCSV,\n      children: \"Export Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"charts-container\",\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Company Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Reach\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Impressions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Engagement (%)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Followers Gained\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: filteredData.map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: row['Company Name']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: row['Date']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: row['Reach']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: row['Impressions']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: row['Engagement (%)']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: row['Followers Gained']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"HLXVceGGHihUE1qiJEx9xWmz8lI=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","Papa","Line","Chart","ChartJS","Select","unparse","saveAs","jsxDEV","_jsxDEV","DATA_URL","Dashboard","_s","data","setData","filteredData","setFilteredData","companies","setCompanies","selectedCompany","setSelectedCompany","selectedDate","setSelectedDate","fetch","then","response","text","parse","complete","result","fetchedData","uniqueCompanies","Set","map","item","company","label","value","handleCompanyChange","selectedOption","handleDateChange","e","target","filtered","filter","chartData","labels","datasets","borderColor","fill","exportToCSV","csv","blob","Blob","type","className","children","fileName","_jsxFileName","lineNumber","columnNumber","options","onChange","placeholder","onClick","row","index","_c","$RefreshReg$"],"sources":["C:/Users/Dell/Desktop/analytics-dashboard/src/pages/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Papa from 'papaparse';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS } from 'chart.js';\nimport Select from 'react-select';\nimport { unparse } from 'json2csv';\nimport { saveAs } from 'file-saver';\nimport 'chart.js/auto';\n\n// Default data fetching URL\nconst DATA_URL = 'https://your-google-sheet-link.csv';\n\nconst Dashboard = () => {\n  // State to hold the raw data, filtered data, company options, and selected filters\n  const [data, setData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [companies, setCompanies] = useState([]);\n  const [selectedCompany, setSelectedCompany] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n\n  // Fetch data on initial load\n  useEffect(() => {\n    fetch(DATA_URL)\n      .then(response => response.text())\n      .then(text => {\n        Papa.parse(text, {\n          complete: (result) => {\n            const fetchedData = result.data;\n            setData(fetchedData);\n            setFilteredData(fetchedData);\n            const uniqueCompanies = [...new Set(fetchedData.map(item => item['Company Name']))];\n            setCompanies(uniqueCompanies.map(company => ({ label: company, value: company })));\n          }\n        });\n      });\n  }, []);\n\n  // Handle company filter change\n  const handleCompanyChange = (selectedOption) => {\n    setSelectedCompany(selectedOption);\n  };\n\n  // Handle date filter change\n  const handleDateChange = (e) => {\n    setSelectedDate(e.target.value);\n  };\n\n  // Apply filters to the data\n  useEffect(() => {\n    let filtered = data;\n    if (selectedCompany) {\n      filtered = filtered.filter(item => item['Company Name'] === selectedCompany.value);\n    }\n    if (selectedDate) {\n      filtered = filtered.filter(item => item['Date'] === selectedDate);\n    }\n    setFilteredData(filtered);\n  }, [selectedCompany, selectedDate, data]);\n\n  // Prepare chart data\n  const chartData = {\n    labels: filteredData.map(item => item['Date']),\n    datasets: [\n      {\n        label: 'Reach',\n        data: filteredData.map(item => item['Reach']),\n        borderColor: 'rgba(75, 192, 192, 1)',\n        fill: false,\n      },\n      {\n        label: 'Impressions',\n        data: filteredData.map(item => item['Impressions']),\n        borderColor: 'rgba(153, 102, 255, 1)',\n        fill: false,\n      },\n    ],\n  };\n\n  // Export filtered data to CSV\n  const exportToCSV = () => {\n    const csv = unparse(filteredData);\n    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n    saveAs(blob, 'filtered_data.csv');\n  };\n\n  return (\n    <div className=\"dashboard-container\">\n      <h1>Social Media Performance</h1>\n\n      {/* Company Filter Dropdown */}\n      <Select\n        options={companies}\n        onChange={handleCompanyChange}\n        value={selectedCompany}\n        placeholder=\"Select Company\"\n      />\n\n      {/* Date Filter */}\n      <input\n        type=\"date\"\n        value={selectedDate}\n        onChange={handleDateChange}\n      />\n\n      {/* Button to Export Data */}\n      <button onClick={exportToCSV}>Export Data</button>\n\n      {/* Line Chart Display */}\n      <div className=\"charts-container\">\n        <Line data={chartData} />\n      </div>\n\n      {/* Data Table */}\n      <table>\n        <thead>\n          <tr>\n            <th>Company Name</th>\n            <th>Date</th>\n            <th>Reach</th>\n            <th>Impressions</th>\n            <th>Engagement (%)</th>\n            <th>Followers Gained</th>\n          </tr>\n        </thead>\n        <tbody>\n          {filteredData.map((row, index) => (\n            <tr key={index}>\n              <td>{row['Company Name']}</td>\n              <td>{row['Date']}</td>\n              <td>{row['Reach']}</td>\n              <td>{row['Impressions']}</td>\n              <td>{row['Engagement (%)']}</td>\n              <td>{row['Followers Gained']}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Dashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}