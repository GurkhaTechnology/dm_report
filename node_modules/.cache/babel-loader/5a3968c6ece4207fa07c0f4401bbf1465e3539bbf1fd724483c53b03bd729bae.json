{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Desktop\\\\analytics-dashboard\\\\src\\\\pages\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, LineElement, PointElement, Title, Tooltip, Legend } from 'chart.js';\nimport Papa from 'papaparse'; // Make sure you have installed PapaParse\n\n// Register the necessary chart components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, LineElement, PointElement, Title, Tooltip, Legend);\nconst Dashboard = () => {\n  _s();\n  const [data, setData] = useState(null); // Initialize with null to handle loading state\n  const [chartData, setChartData] = useState(null); // This will hold the chart-ready data\n\n  // UseEffect to fetch and parse CSV data when the component mounts\n  useEffect(() => {\n    // Fetch data from the CSV URL\n    fetch(\"https://docs.google.com/spreadsheets/d/e/2PACX-1vSTTSyOvOYmKiGeKXUUzxGWjQ7z9QpoUv1rFM1kkz5g7_vgKNmbiOcZPBQnyQMQCLJcFTS_rJ03KVHD/pub?gid=0&single=true&output=csv\").then(response => response.text()).then(csvData => {\n      // Parse the CSV data\n      const parsedData = Papa.parse(csvData, {\n        header: true,\n        skipEmptyLines: true\n      }).data;\n      setData(parsedData); // Save the parsed data into state\n    }).catch(error => {\n      console.error(\"Error fetching or parsing data:\", error);\n    });\n  }, []);\n\n  // This function prepares data for the chart\n  useEffect(() => {\n    if (data && data.length > 0) {\n      // Transform the data to make it suitable for the chart\n      const labels = data.map(item => item.Date); // X-axis values (dates)\n      const reachData = data.map(item => parseInt(item.Reach, 10)); // Y-axis values (Reach)\n      const impressionsData = data.map(item => parseInt(item.Impressions, 10)); // Y-axis values (Impressions)\n\n      // Set the chart data format\n      setChartData({\n        labels: labels,\n        // X-axis labels (dates)\n        datasets: [{\n          label: 'Reach',\n          data: reachData,\n          borderColor: 'rgba(75, 192, 192, 1)',\n          backgroundColor: 'rgba(75, 192, 192, 0.2)',\n          fill: false\n        }, {\n          label: 'Impressions',\n          data: impressionsData,\n          borderColor: 'rgba(153, 102, 255, 1)',\n          backgroundColor: 'rgba(153, 102, 255, 0.2)',\n          fill: false\n        }]\n      });\n    }\n  }, [data]);\n\n  // Render loading message while data is not ready\n  if (!chartData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Social Media Performance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: {\n        responsive: true,\n        plugins: {\n          title: {\n            display: true,\n            text: 'Social Media Metrics (Reach vs Impressions)'\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"I0YXDamKuxGXd2bc6uoue8+jDuY=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","ChartJS","CategoryScale","LinearScale","LineElement","PointElement","Title","Tooltip","Legend","Papa","jsxDEV","_jsxDEV","register","Dashboard","_s","data","setData","chartData","setChartData","fetch","then","response","text","csvData","parsedData","parse","header","skipEmptyLines","catch","error","console","length","labels","map","item","Date","reachData","parseInt","Reach","impressionsData","Impressions","datasets","label","borderColor","backgroundColor","fill","children","fileName","_jsxFileName","lineNumber","columnNumber","options","responsive","plugins","title","display","_c","$RefreshReg$"],"sources":["C:/Users/Dell/Desktop/analytics-dashboard/src/pages/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, LineElement, PointElement, Title, Tooltip, Legend } from 'chart.js';\nimport Papa from 'papaparse'; // Make sure you have installed PapaParse\n\n// Register the necessary chart components\nChartJS.register(CategoryScale, LinearScale, LineElement, PointElement, Title, Tooltip, Legend);\n\nconst Dashboard = () => {\n  const [data, setData] = useState(null); // Initialize with null to handle loading state\n  const [chartData, setChartData] = useState(null); // This will hold the chart-ready data\n\n  // UseEffect to fetch and parse CSV data when the component mounts\n  useEffect(() => {\n    // Fetch data from the CSV URL\n    fetch(\"https://docs.google.com/spreadsheets/d/e/2PACX-1vSTTSyOvOYmKiGeKXUUzxGWjQ7z9QpoUv1rFM1kkz5g7_vgKNmbiOcZPBQnyQMQCLJcFTS_rJ03KVHD/pub?gid=0&single=true&output=csv\")\n      .then(response => response.text())\n      .then(csvData => {\n        // Parse the CSV data\n        const parsedData = Papa.parse(csvData, { header: true, skipEmptyLines: true }).data;\n        setData(parsedData); // Save the parsed data into state\n      })\n      .catch(error => {\n        console.error(\"Error fetching or parsing data:\", error);\n      });\n  }, []);\n\n  // This function prepares data for the chart\n  useEffect(() => {\n    if (data && data.length > 0) {\n      // Transform the data to make it suitable for the chart\n      const labels = data.map(item => item.Date); // X-axis values (dates)\n      const reachData = data.map(item => parseInt(item.Reach, 10)); // Y-axis values (Reach)\n      const impressionsData = data.map(item => parseInt(item.Impressions, 10)); // Y-axis values (Impressions)\n\n      // Set the chart data format\n      setChartData({\n        labels: labels, // X-axis labels (dates)\n        datasets: [\n          {\n            label: 'Reach',\n            data: reachData,\n            borderColor: 'rgba(75, 192, 192, 1)',\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n            fill: false,\n          },\n          {\n            label: 'Impressions',\n            data: impressionsData,\n            borderColor: 'rgba(153, 102, 255, 1)',\n            backgroundColor: 'rgba(153, 102, 255, 0.2)',\n            fill: false,\n          },\n        ],\n      });\n    }\n  }, [data]);\n\n  // Render loading message while data is not ready\n  if (!chartData) {\n    return <div>Loading data...</div>;\n  }\n\n  return (\n    <div>\n      <h2>Social Media Performance</h2>\n      <Line data={chartData} options={{\n        responsive: true,\n        plugins: {\n          title: {\n            display: true,\n            text: 'Social Media Metrics (Reach vs Impressions)',\n          },\n        },\n      }} />\n    </div>\n  );\n};\n\nexport default Dashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}